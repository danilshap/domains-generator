package domains

import (
	"fmt"
	db "github.com/danilshap/domains-generator/internal/db/sqlc"
)

type ListData struct {
	Domains     []db.Domain
	CurrentPage int32
	TotalPages  int32
	PageSize    int32
}

templ List(data ListData) {
	<div class="bg-white shadow sm:rounded-lg">
		<div class="px-4 py-5 sm:p-6">
			<div class="sm:flex sm:items-center sm:justify-between">
				<div>
					<h3 class="text-lg leading-6 font-medium text-gray-900">Domains</h3>
					<p class="mt-1 text-sm text-gray-500">Manage your domain names and their settings.</p>
				</div>
				<div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
					<button
						type="button"
						class="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto"
						hx-get="/domains/new"
						hx-target="#domain-form"
						hx-swap="innerHTML"
					>
						<i class="fas fa-plus mr-2"></i>
						Add Domain
					</button>
				</div>
			</div>
			<div id="domain-form" class="mt-6"></div>
			<div id="domains-list" class="mt-8">
				@TableWithPagination(data)
			</div>
		</div>
	</div>
}

templ Pagination(data ListData) {
	if data.TotalPages > 1 {
		<div class="mt-4 flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6">
			<div class="flex flex-1 justify-between sm:hidden">
				if data.CurrentPage > 1 {
					<button
						class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
						hx-get={ fmt.Sprintf("/domains?page=%d", data.CurrentPage-1) }
						hx-target="#domains-list"
					>Previous</button>
				}
				if data.CurrentPage < data.TotalPages {
					<button
						class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
						hx-get={ fmt.Sprintf("/domains?page=%d", data.CurrentPage+1) }
						hx-target="#domains-list"
					>Next</button>
				}
			</div>
			<div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
				<div>
					<p class="text-sm text-gray-700">
						Showing page <span class="font-medium">{ fmt.Sprint(data.CurrentPage) }</span> of
						<span class="font-medium">{ fmt.Sprint(data.TotalPages) }</span>
					</p>
				</div>
				<div>
					<nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
						if data.CurrentPage > 1 {
							<button
								class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
								hx-get={ fmt.Sprintf("/domains?page=%d", data.CurrentPage-1) }
								hx-target="#domains-list"
							>
								<span class="sr-only">Previous</span>
								<i class="fas fa-chevron-left h-5 w-5"></i>
							</button>
						}
						for i := int32(1); i <= data.TotalPages; i++ {
							<button
								class={ templ.Classes(
									"relative inline-flex items-center px-4 py-2 text-sm font-semibold ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0",
									templ.KV("bg-indigo-600 text-white", i == data.CurrentPage),
									templ.KV("text-gray-900", i != data.CurrentPage),
								) }
								hx-get={ fmt.Sprintf("/domains?page=%d", i) }
								hx-target="#domains-list"
							>{ fmt.Sprint(i) }</button>
						}
						if data.CurrentPage < data.TotalPages {
							<button
								class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
								hx-get={ fmt.Sprintf("/domains?page=%d", data.CurrentPage+1) }
								hx-target="#domains-list"
							>
								<span class="sr-only">Next</span>
								<i class="fas fa-chevron-right h-5 w-5"></i>
							</button>
						}
					</nav>
				</div>
			</div>
		</div>
	}
}

templ Table(domains []db.Domain) {
	<div class="overflow-x-auto">
		<table class="min-w-full divide-y divide-gray-300">
			<thead class="bg-gray-50">
				<tr>
					<th class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900">Name</th>
					<th class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Provider</th>
					<th class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Status</th>
					<th class="relative py-3.5 pl-3 pr-4 sm:pr-6">
						<span class="sr-only">Actions</span>
					</th>
				</tr>
			</thead>
			<tbody class="divide-y divide-gray-200 bg-white">
				for _, domain := range domains {
					@TableRow(domain)
				}
			</tbody>
		</table>
	</div>
}

templ TableRow(domain db.Domain) {
	<tr>
		<td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900">
			<a href={ templ.SafeURL("/domains/" + fmt.Sprint(domain.ID)) } class="text-indigo-600 hover:text-indigo-900">
				{ domain.Name }
			</a>
		</td>
		<td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">{ domain.Provider }</td>
		<td class="whitespace-nowrap px-3 py-4 text-sm">
			if domain.Status == 1 {
				<span class="inline-flex rounded-full bg-green-100 px-2 text-xs font-semibold leading-5 text-green-800">
					Active
				</span>
			} else {
				<span class="inline-flex rounded-full bg-yellow-100 px-2 text-xs font-semibold leading-5 text-yellow-800">
					Inactive
				</span>
			}
		</td>
		<td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
			<button
				class="text-indigo-600 hover:text-indigo-900 mr-4"
				hx-get={ "/domains/" + fmt.Sprint(domain.ID) + "/edit" }
				hx-target="#domain-form"
				hx-swap="innerHTML"
			>
				<i class="fas fa-edit"></i>
			</button>
			<button
				class="text-red-600 hover:text-red-900"
				hx-delete={ "/domains/" + fmt.Sprint(domain.ID) }
				hx-confirm="Are you sure you want to delete this domain?"
				hx-target="closest tr"
				hx-swap="delete"
			>
				<i class="fas fa-trash"></i>
			</button>
		</td>
	</tr>
}

templ TableWithPagination(data ListData) {
	<div>
		@Table(data.Domains)
		@Pagination(data)
	</div>
}
