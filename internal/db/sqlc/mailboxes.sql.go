// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: mailboxes.sql

package db

import (
	"context"
	"database/sql"
)

const createMailbox = `-- name: CreateMailbox :one
INSERT INTO mailboxes (address, password, domain_id, created_at, status)
VALUES ($1, $2, $3, NOW(), $4)
RETURNING id
`

type CreateMailboxParams struct {
	Address  string        `json:"address"`
	Password string        `json:"password"`
	DomainID sql.NullInt32 `json:"domain_id"`
	Status   sql.NullInt32 `json:"status"`
}

func (q *Queries) CreateMailbox(ctx context.Context, arg CreateMailboxParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createMailbox,
		arg.Address,
		arg.Password,
		arg.DomainID,
		arg.Status,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteMailbox = `-- name: DeleteMailbox :exec
DELETE FROM mailboxes
WHERE id = $1
`

func (q *Queries) DeleteMailbox(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMailbox, id)
	return err
}

const getAllMailboxes = `-- name: GetAllMailboxes :many
SELECT id, address, domain_id, status, created_at
FROM mailboxes
ORDER BY created_at DESC
`

type GetAllMailboxesRow struct {
	ID        int32         `json:"id"`
	Address   string        `json:"address"`
	DomainID  sql.NullInt32 `json:"domain_id"`
	Status    sql.NullInt32 `json:"status"`
	CreatedAt sql.NullTime  `json:"created_at"`
}

func (q *Queries) GetAllMailboxes(ctx context.Context) ([]GetAllMailboxesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllMailboxes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllMailboxesRow{}
	for rows.Next() {
		var i GetAllMailboxesRow
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.DomainID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMailboxesByDomain = `-- name: GetMailboxesByDomain :many
SELECT id, address, password, domain_id, status, created_at
FROM mailboxes
WHERE address = $1
`

type GetMailboxesByDomainRow struct {
	ID        int32         `json:"id"`
	Address   string        `json:"address"`
	Password  string        `json:"password"`
	DomainID  sql.NullInt32 `json:"domain_id"`
	Status    sql.NullInt32 `json:"status"`
	CreatedAt sql.NullTime  `json:"created_at"`
}

func (q *Queries) GetMailboxesByDomain(ctx context.Context, address string) ([]GetMailboxesByDomainRow, error) {
	rows, err := q.db.QueryContext(ctx, getMailboxesByDomain, address)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMailboxesByDomainRow{}
	for rows.Next() {
		var i GetMailboxesByDomainRow
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Password,
			&i.DomainID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getmailboxesByDomain = `-- name: GetmailboxesByDomain :many
SELECT id, address, status, created_at
FROM mailboxes
WHERE domain_id = $1
ORDER BY created_at DESC
`

type GetmailboxesByDomainRow struct {
	ID        int32         `json:"id"`
	Address   string        `json:"address"`
	Status    sql.NullInt32 `json:"status"`
	CreatedAt sql.NullTime  `json:"created_at"`
}

func (q *Queries) GetmailboxesByDomain(ctx context.Context, domainID sql.NullInt32) ([]GetmailboxesByDomainRow, error) {
	rows, err := q.db.QueryContext(ctx, getmailboxesByDomain, domainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetmailboxesByDomainRow{}
	for rows.Next() {
		var i GetmailboxesByDomainRow
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setMailboxStatus = `-- name: SetMailboxStatus :exec
UPDATE mailboxes
SET status = $1
WHERE id = $2
`

type SetMailboxStatusParams struct {
	Status sql.NullInt32 `json:"status"`
	ID     int32         `json:"id"`
}

func (q *Queries) SetMailboxStatus(ctx context.Context, arg SetMailboxStatusParams) error {
	_, err := q.db.ExecContext(ctx, setMailboxStatus, arg.Status, arg.ID)
	return err
}
