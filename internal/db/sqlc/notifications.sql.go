// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notifications.sql

package db

import (
	"context"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
    user_id, title, message, type
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, title, message, type, read_at, created_at
`

type CreateNotificationParams struct {
	UserID  int32            `json:"user_id"`
	Title   string           `json:"title"`
	Message string           `json:"message"`
	Type    NotificationType `json:"type"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification,
		arg.UserID,
		arg.Title,
		arg.Message,
		arg.Type,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Message,
		&i.Type,
		&i.ReadAt,
		&i.CreatedAt,
	)
	return i, err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, user_id, title, message, type, read_at, created_at FROM notifications
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNotificationByID(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotificationByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Message,
		&i.Type,
		&i.ReadAt,
		&i.CreatedAt,
	)
	return i, err
}

const getNotifications = `-- name: GetNotifications :many
SELECT id, user_id, title, message, type, read_at, created_at FROM notifications 
WHERE user_id = $1 
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetNotificationsParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetNotifications(ctx context.Context, arg GetNotificationsParams) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotifications, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Message,
			&i.Type,
			&i.ReadAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsCount = `-- name: GetNotificationsCount :one
SELECT COUNT(*) FROM notifications 
WHERE user_id = $1
`

func (q *Queries) GetNotificationsCount(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNotificationsCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUnreadNotificationsCount = `-- name: GetUnreadNotificationsCount :one
SELECT COUNT(*) FROM notifications 
WHERE user_id = $1 AND read_at IS NULL
`

func (q *Queries) GetUnreadNotificationsCount(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUnreadNotificationsCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const markAllNotificationsRead = `-- name: MarkAllNotificationsRead :exec
UPDATE notifications 
SET read_at = NOW() 
WHERE user_id = $1 AND read_at IS NULL
`

func (q *Queries) MarkAllNotificationsRead(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, markAllNotificationsRead, userID)
	return err
}

const markNotificationRead = `-- name: MarkNotificationRead :exec
UPDATE notifications 
SET read_at = NOW() 
WHERE id = $1
`

func (q *Queries) MarkNotificationRead(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, markNotificationRead, id)
	return err
}
